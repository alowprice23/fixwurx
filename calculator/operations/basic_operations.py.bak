"""
Basic arithmetic operations for the calculator application.
Now contains corrected implementations and basic input validation.
"""

from typing import Union

Number = Union[int, float]


def _validate_numbers(*args: Number) -> None:
    """Ensure all supplied arguments are int or float."""
    for arg in args:
        if not isinstance(arg, (int, float)):
            raise TypeError(
                f"Operands must be int or float, got {type(arg).__name__}."
            )


def add(a: Number, b: Number) -> Number:
    """Add two numbers and return the result."""
    _validate_numbers(a, b)
    return a + b


def subtract(a: Number, b: Number) -> Number:
    """Subtract b from a and return the result."""
    _validate_numbers(a, b)
    return a - b


def multiply(a: Number, b: Number) -> Number:
    """Multiply two numbers and return the result."""
    _validate_numbers(a, b)
    return a * b


def divide(a: Number, b: Number) -> Number:
    """Divide a by b and return the result.

    Raises
    ------
    ZeroDivisionError
        If *b* is 0.
    """
    _validate_numbers(a, b)
    if b == 0:
        raise ZeroDivisionError("Division by zero is undefined.")
    return a / b


def power(a: Number, b: Number) -> Number:
    """Return *a* raised to the power of *b*."""
    _validate_numbers(a, b)
    return a ** b


def modulus(a: Number, b: Number) -> Number:
    """Return the remainder of *a* divided by *b*.

    Raises
    ------
    ZeroDivisionError
        If *b* is 0.
    """
    _validate_numbers(a, b)
    if b == 0:
        raise ZeroDivisionError("Modulus by zero is undefined.")
    return a % b
